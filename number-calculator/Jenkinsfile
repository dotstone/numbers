pipeline {
    agent any
    
    environment {
        SERVICE_NAME = 'number-calculator'
        // Default version if no bump is needed
        NEXT_VERSION = '0.0.0'
    }
    
    stages {
        stage('Version') {
            when { branch 'main' }
            steps {
                script {
                    // Ensure we have full git history and tags
                    sh '''
                        git fetch --tags --prune --unshallow || true
                        git fetch --tags --prune || true
                    '''

                    // Determine last tag or default to 0.0.0
                    def lastTag = sh(script: "git describe --tags --match '${SERVICE_NAME}-*' --abbrev=0 2>/dev/null || echo 0.0.0", returnStdout: true).trim()
                    lastTag = lastTag.replaceAll("${SERVICE_NAME}-", "")
                    
                    // Collect commit messages since last tag (or all if 0.0.0)
                    def range = (lastTag == '0.0.0') ? '' : "${SERVICE_NAME}-${lastTag}..HEAD"
                    def commits = sh(script: "git log ${range} --pretty=%s 2>/dev/null || true", returnStdout: true).trim()

                    // Only consider commits that affect this service
                    def serviceCommits = ""
                    if (commits) {
                        def changes = sh(script: "git diff --name-only ${SERVICE_NAME}-${lastTag}..HEAD ${SERVICE_NAME}/ || true", returnStdout: true).trim()
                        if (changes) {
                            serviceCommits = commits
                        }
                    }

                    // Decide bump level
                    def bump = 'none'
                    if (serviceCommits =~ /BREAKING CHANGE|!:/) {
                        bump = 'major'
                    } else if (serviceCommits =~ /(?m)^feat:/) {
                        bump = 'minor'
                    } else if (serviceCommits =~ /(?m)^(fix|chore|docs|style|refactor|perf|test):/) {
                        bump = 'patch'
                    }

                    // Parse lastTag into components
                    def (maj, min, pat) = lastTag.tokenize('.')
                    if (!maj) { maj = '0'; min = '0'; pat = '0' }
                    int iMaj = maj as int
                    int iMin = min as int
                    int iPat = pat as int

                    if (bump == 'major') {
                        iMaj += 1; iMin = 0; iPat = 0
                    } else if (bump == 'minor') {
                        iMin += 1; iPat = 0
                    } else if (bump == 'patch') {
                        iPat += 1
                    }

                    def nextVersion = "${iMaj}.${iMin}.${iPat}"
                    // If no bump and lastTag != 0.0.0, reuse lastTag; otherwise start at 0.1.0
                    if (bump == 'none') {
                        nextVersion = (lastTag == '0.0.0') ? '0.1.0' : lastTag
                    }

                    echo "Service: ${SERVICE_NAME}"
                    echo "Last tag: ${lastTag}"
                    echo "Bump: ${bump}"
                    echo "Next version: ${nextVersion}"
                    env.NEXT_VERSION = nextVersion

                    // Tag and push only when a new tag is needed (bump != none or no tag existed)
                    if (nextVersion != lastTag) {
                        withCredentials([usernamePassword(credentialsId: 'github-pat-numbers', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            sh """
                                git config user.email "ci@jenkins"
                                git config user.name "Jenkins CI"
                                git tag -a ${SERVICE_NAME}-${nextVersion} -m "chore(release): ${SERVICE_NAME}-${nextVersion}"
                                git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/dotstone/numbers.git
                                git push origin ${SERVICE_NAME}-${nextVersion}
                            """
                        }
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building the project...'
                dir(SERVICE_NAME) {
                    script {
                        if (isUnix()) {
                            sh './mvnw clean compile -Drevision=${NEXT_VERSION}'
                        } else {
                            bat '.\\mvnw.cmd clean compile -Drevision=%NEXT_VERSION%'
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running unit tests...'
                dir(SERVICE_NAME) {
                    script {
                        if (isUnix()) {
                            sh './mvnw test -Drevision=${NEXT_VERSION}'
                        } else {
                            bat '.\\mvnw.cmd test -Drevision=%NEXT_VERSION%'
                        }
                    }
                }
            }
            post {
                always {
                    junit "${SERVICE_NAME}/**/target/surefire-reports/*.xml"
                    echo 'Test results published'
                }
            }
        }

        stage('Package') {
            steps {
                echo 'Packaging the application...'
                dir(SERVICE_NAME) {
                    script {
                        if (isUnix()) {
                            sh './mvnw package -DskipTests -Drevision=${NEXT_VERSION}'
                        } else {
                            bat '.\\mvnw.cmd package -DskipTests -Drevision=%NEXT_VERSION%'
                        }
                    }
                }
            }
        }

        stage('Code Coverage') {
            steps {
                echo 'Generating code coverage report...'
                dir(SERVICE_NAME) {
                    script {
                        if (isUnix()) {
                            sh './mvnw verify -Drevision=${NEXT_VERSION}'
                        } else {
                            bat '.\\mvnw.cmd verify -Drevision=%NEXT_VERSION%'
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "${SERVICE_NAME} build and deployment completed successfully!"
        }
        failure {
            echo "${SERVICE_NAME} build or deployment failed!"
        }
    }
}
